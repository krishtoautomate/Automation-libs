/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * User Manual available at https://docs.gradle.org/5.4.1/userguide/java_library_plugin.html
 */

plugins {
    id 'java'
//    id 'maven-publish'
    id 'groovy'
//    id 'io.qameta.allurereport' '2.11.2'
//    id 'com.jfrog.artifactory'
}

//apply plugin: 'com.jfrog.artifactory'

def timestamp() {
    return new Date().format('yyyy-MM-dd')
}

allprojects {
    repositories {
        mavenLocal()
        mavenCentral()
        google()

//    maven {
//        url 'https://artifactory.bell.corp.bce.ca/ui/native/central-maven'
//        allowInsecureProtocol = true
//    }
    }
}

// Define the version of AspectJ
def aspectJVersion = "1.9.20.1"
def cucumberVersion = "7.8.0"
def seleniumVersion = "4.22.0"
def allureVersion = "2.26.0";
def testNGVersion = "7.10.1";
def appiumVersion = "9.2.2";

// Define configuration for AspectJ agent
configurations {
    agent {
        canBeResolved = true
        canBeConsumed = true
    }
}

//allure {
//    version = '2.26.0'
//    autoconfigure = true
//    aspectJweaver = true
//}


dependencies {

//    implementation fileTree(dir: 'libs', include: ['*.jar'])
//    testImplementation files('libs/Base.jar')

    testImplementation "org.testng:testng:$testNGVersion"
    testImplementation "org.seleniumhq.selenium:selenium-java:$seleniumVersion"
    testImplementation "org.seleniumhq.selenium:selenium-support:$seleniumVersion"
    testImplementation "io.appium:java-client:$appiumVersion"
    testImplementation 'com.epam.healenium:healenium-web:3.2.5'
    implementation 'commons-io:commons-io:2.11.0'
    testImplementation 'com.googlecode.json-simple:json-simple:1.1.1'
    implementation 'javax.mail:mail:1.4.7'
    implementation 'org.json:json:20230227'
    implementation 'com.opencsv:opencsv:5.7.1'
    implementation 'com.jcraft:jsch:0.1.54'
    implementation 'org.bytedeco.javacpp-presets:tesseract:4.0.0-1.4.4'
    testImplementation 'io.rest-assured:rest-assured:5.3.0'
    testImplementation 'com.aventstack:extentreports:5.0.9'
    testImplementation 'log4j:log4j:1.2.17'
    testImplementation 'org.slf4j:slf4j-api:2.0.5'
    testImplementation "org.slf4j:slf4j-jdk14:2.0.5"
    testImplementation "com.oracle.ojdbc:ojdbc8:19.3.0.0"
    testImplementation 'org.usb4java:usb4java-javax:1.2.0'
    testImplementation "com.slack.api:slack-api-client:1.28.0"
    testImplementation "io.cucumber:cucumber-java:$cucumberVersion"
    testImplementation "io.cucumber:cucumber-junit:$cucumberVersion"
    testImplementation "io.cucumber:cucumber-testng:$cucumberVersion"
    // Import allure-bom to ensure correct versions of all the dependencies are used
    testImplementation platform("io.qameta.allure:allure-bom:$allureVersion")
    // Add necessary Allure dependencies to dependencies section
    testImplementation "io.qameta.allure:allure-cucumber7-jvm:$allureVersion"
    testImplementation "io.qameta.allure:allure-testng:$allureVersion"
    agent "org.aspectj:aspectjweaver:$aspectJVersion"
}

group = "Automation-libs"
version = "0.0.1-SNAPSHOT"
java.sourceCompatibility = JavaVersion.VERSION_17
java.targetCompatibility = JavaVersion.VERSION_17

//java {
//    sourceCompatibility = JavaVersion.VERSION_11
//    targetCompatibility = JavaVersion.VERSION_11
//}

//publishing {
//    publications {
//        maven(MavenPublication) {
//            from(components.java)
//        }
//    }
//}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"

    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs << "-Xlint:unchecked"
        }
    }
}

//sourceSets.all {
//    configurations.getByName(runtimeClasspathConfigurationName) {
//        attributes.attribute(Attribute.of("org.gradle.jvm.environment", String), "standard-jvm")
//    }
//    configurations.getByName(compileClasspathConfigurationName) {
//        attributes.attribute(Attribute.of("org.gradle.jvm.environment", String), "standard-jvm")
//    }
//}

task cucumber() {
    dependsOn assemble, testClasses
    doLast {
        javaexec {
            main = "io.cucumber.core.cli.Main"
            classpath = configurations.cucumberRuntime + sourceSets.main.output + sourceSets.test.output
            args = ['--plugin', 'pretty', '--glue', 'gradle.cucumber', 'src/test/resources']
        }
    }
}

//./gradlew BaseJar
task BaseJar(type: Jar) {
    from sourceSets.test.output
    include 'com/base/*'
    include 'com/ReportManager/*'
    include 'com/DataManager/*'
    include 'com/Drivers/*'
    destinationDirectory = file("$buildDir/jar")
    archiveFileName.set("Base.jar")
    exclude 'META-INF/MANIFEST.MF'
}

ext {
    javaMainClass = "com.Others.MergeReports"
}

task runMergeReports(type: Exec) {
    dependsOn build
    group = "Execution"
    description = "Run the main class with ExecTask"
    commandLine "java", "-classpath", sourceSets.test.runtimeClasspath.getAsPath(), javaMainClass
}

test {
//    exclude '**/*'
}

tasks.withType(Test) {
    jvmArgs = ["-javaagent:${configurations.agent.singleFile}"]
//    -javaagent:/Users/home/.gradle/caches/modules-2/files-2.1/org.aspectj/aspectjweaver/1.9.20.1/33b0e41476658229933eec7134678cf336e66dd4/aspectjweaver-1.9.20.1.jar
//    println "${configurations.agent.singleFile}"
    testLogging {
        events "passed", "skipped", "failed"
    }
    testLogging.showStandardStreams = true

    useTestNG() {
        suites '' + System.getProperty('testNGsuiteXmlFile')
        useDefaultListeners = true
    }
    ext.workingDirectory = 'test-output'
}
