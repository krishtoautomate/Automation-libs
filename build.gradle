/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * User Manual available at https://docs.gradle.org/5.4.1/userguide/java_library_plugin.html
 */

plugins {
    id 'java'
    id 'maven-publish'
    id 'groovy'
}

def timestamp() {
    return new Date().format('yyyy-MM-dd')
}

repositories {
	mavenCentral()
    mavenLocal()
    google()
    jcenter()
}
dependencies {
	
    testImplementation 'org.testng:testng:6.14.3'
    testImplementation 'org.assertj:assertj-core:2.0.0'

    testImplementation 'org.seleniumhq.selenium:selenium-java:3.141.59'
    testImplementation 'org.seleniumhq.selenium:selenium-android-driver:2.39.0'
    implementation 'org.seleniumhq.selenium:selenium-support:3.141.59'

    implementation 'io.appium:java-client:7.6.0'
  	
    implementation 'commons-io:commons-io:2.6'

    implementation 'com.squareup.retrofit2:converter-gson:2.5.0'
    implementation 'com.google.code.gson:gson:2.6.2'
    implementation 'com.googlecode.json-simple:json-simple:1.1.1'

    implementation 'javax.mail:mail:1.4'
    implementation 'org.json:json:20160810'
    implementation 'com.opencsv:opencsv:4.0'
    implementation 'com.jcraft:jsch:0.1.54'
    implementation 'org.bytedeco.javacpp-presets:tesseract:4.0.0-1.4.4'
    
    testImplementation 'io.rest-assured:rest-assured:4.4.0'
   
   	testImplementation 'com.aventstack:extentreports:5.0.6'
   	testImplementation 'tech.grasshopper:pdfextentreporter:0.3'
    
    implementation 'com.google.guava:guava:21.0'
    
   	implementation 'org.slf4j:slf4j-api:1.7.25'
    implementation 'org.slf4j:slf4j-jdk14:1.7.25'
	
    testImplementation "com.oracle.ojdbc:ojdbc8:19.3.0.0"
    
    testImplementation 'org.usb4java:usb4java-javax:1.2.0'
    
    testImplementation 'com.slack.api:slack-api-client:1.8.1'
   	   
}

group = 'Automation-libs'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

publishing {
    publications {
        maven(MavenPublication) {
            from(components.java)
        }
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    
    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs << "-Xlint:unchecked"
        }
    }
}


//gradle clean compiletestjava -PappPackage=BETA -PappActivity=activity -PbundleId=PROD
//task createCapability(type: Exec) {
//tasks.create(name: 'createCapability') {
/*
    File capabilities = new File(projectDir, "capabilities.json"); //.mkdirs();
    capabilities.write('{\n'+
					'"ANDROID":\n'+
					  '[\n'+
					    '{\n'+
						    '"platformName": "Android",\n'+
						    '"platformVersion":"8.1.0",\n'+
						    '"automationName":"uiautomator2",\n'+
						    '"autoLaunch":true,\n'+
							'"noReset":true,\n'+
							'"fullReset":false,\n'+
							'"newCommandTimeout":60,\n'+
							'"androidInstallTimeout":150000,\n'+
							'"autoDismissAlerts":true,\n'+
						    '"appPackage":"'+findProperty('appPackage')+'",\n'+
						    '"appActivity":"'+findProperty('appActivity')+'"\n'+
						'}\n'+
					  '],\n'+
				'"IOS":\n'+
				      '[\n'+
				        '{\n'+
						    '"platformName": "iOS",\n'+
						    '"platformVersion": "12.2",\n'+
						    '"automationName": "XCUITest",\n'+
						    '"autoLaunch":true,\n'+
						    '"fullReset":false,\n'+
						    '"noReset":false,\n'+
						    '"useNewWDA":true,\n'+
							'"newCommandTimeout":60,\n'+
							'"useJSONSource":true,\n'+
							'"autoDismissAlerts":true,\n'+
						    '"bundleId":"'+findProperty('bundleId')+'",\n'+
						    '"waitForQuiescence":false,\n'+
						    '"wdaStartupRetries":5,\n'+
						    '"wdaStartupRetryInterval":1000\n'+
						'}\n'+
				      ']\n'+
				'}');
}
*/
allprojects { project ->
    tasks.withType(Test) { testTask ->
        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} Passed, ${result.failedTestCount} Failures, ${result.skippedTestCount} Skipped)"
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
            }
            //println("Failed Test Count : " + result.failedTestCount)
            if (result.failedTestCount < result.successfulTestCount) {
                ignoreFailures = true

                println("failedTestCount : " + result.failedTestCount)
            }else{
                ignoreFailures = false

                println("failedTestCount : " + result.failedTestCount)
            }
        }
    }
}

test {

	testLogging {
		events "passed", "skipped", "failed"
	}

	testLogging.showStandardStreams = true
	
    useTestNG(){
    
        if (project.hasProperty('testNG')) { 
        	suites 'src/test/resources/debugTestNG.xml' 
        }
         suites ''+System.getProperty('testNGsuiteXmlFile')
        //suites 'src/test/resources/'+System.getProperty('testNGsuiteXmlFile')
        //implimentation : gradle clean test -DtestNGsuiteXmlFile=src/test/resources/debugTestNG.xml
        
	    useDefaultListeners = true
    }
    ext.workingDirectory = 'test-output/${timestamp()}'
    
}
